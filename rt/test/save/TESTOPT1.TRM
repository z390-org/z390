TESTOPT1  MZ390 START
MZ390I Copyright 2011 Automated Software Tools Corporation
MZ390I Copyright 2013 Cat Herder Software, LLC
MZ390I Copyright 2018 Joachim Bartz, Germany
MZ390I z390 is licensed under GNU General Public License
MZ390I program = rt\test\TESTOPT1.MLC
MZ390I options = sysmac(C:\Users\Achim\GitHub\z390\mac+.) 
  syscpy(C:\Users\Achim\GitHub\z390\mac+.) @rt\Options.opt=(bal notiming stats) 
  @rt\test\TESTOPT1.OPT=(@TESTOPTA=(TRACEA) NOTIMING TRACE @TESTOPTB=(CON) 
  @TESTOPTC=(NOAUTOLINK NOBAL NOBS2000 NOCICS NOCON NODUMP NOEPILOG NOERRSUM 
  NOGUAM NOINIT NOLIST NOLISTCALL NOLISTUSE NOLOADHIGH NOMCALL NOOBJ NOOBJHEX 
  NOPC NOPCOPT NOPROLOG NOPROTECT NOREFORMAT NOREGS NORMODE24 NORMODE31 
  NOSTATS NOTIME NOTIMING NOTRACE NOTRACEA NOTRACEALL NOTRACEC NOTRACEG 
  NOTRACEL NOTRACEM NOTRACEP NOTRACEQ NOTRACET NOTRACEV NOTRAP NOTS NOVCB 
  NOXREF ALLOW AMODE24 AMODE31 ASCII ASM ASSIST AUTOLINK BAL BS2000 CHKMAC(0) 
  CHKSRC(0) CICS CON DUMP EPILOG ERR(100) ERRSUM GUAM INIT LIST LISTCALL 
  LISTUSE LOADHIGH MAXCALL(50) MAXESD(1000) MAXFILE(1000) MAXGBL(1000000) 
  MAXHEIGHT(600) MAXLCL(100000) MAXLINE(200000) MAXLOG(1000000) 
  MAXPARM(100000) MAXPC(50000) MAXQUE(1000) MAXRLD(10000) MAXSIZE(50) 
  MAXSYM(50000) MAXWARN(4) MAXWIDTH(800) MEM(1) MINHEIGHT(150) MINWIDTH(150) 
  MCALL OBJ OBJHEX PARM('text') PC PCOPT PROLOG PROTECT REFORMAT REGS RMODE24 
  RMODE31 STATS SYSPARM('text') TIME TIMING TRACE TRACE(AEGLMPQTV) TRACEA 
  TRACEALL TRACEC TRACEG TRACEL TRACEM TRACEP TRACEQ TRACET TRACEV TRAP TS 
  VCB XREF NOCICS NOERRSUM NOTS NOTIMING)) systerm(rt\test\RTTEST)
GBLC &SYSADATA_DSN(1)
GBLC &SYSADATA_MEMBER(1)
GBLC &SYSADATA_VOLUME(1)
GBLC &SYSASM(1)
GBLB &SYSEDF(1)
GBLB &SYSCICS(1)
GBLB &SYSCICS_EPILOG(1)
GBLB &SYSCICS_PROLOG(1)
GBLC &SYSCLOCK(1)
GBLC &SYSDATC(1)
GBLC &SYSDATE(1)
GBLC &SYSIN_DSN(1)
GBLC &SYSIN_MEMBER(1)
GBLC &SYSIN_VOLUME(1)
GBLC &SYSJOB(1)
GBLC &SYSLIB_DSN(1)
GBLC &SYSLIB_MEMBER(1)
GBLC &SYSLIB_VOLUME(1)
GBLC &SYSLIN_DSN(1)
GBLC &SYSLIN_MEMBER(1)
GBLC &SYSLIN_VOLUME(1)
GBLC &SYSMAC(1)
GBLC &SYSM_HSEV(1)
GBLC &SYSM_SEV(1)
GBLB &SYSOPT_DBCS(1)
GBLC &SYSOPT_OPTABLE(1)
GBLB &SYSOPT_RENT(1)
GBLB &SYSOPT_XOBJECT(1)
GBLC &SYSPARM(1)
GBLC &SYSPRINT_DSN(1)
GBLC &SYSPRINT_MEMBER(1)
GBLC &SYSPRINT_VOLUME(1)
GBLC &SYSPUNCH_DSN(1)
GBLC &SYSPUNCH_MEMBER(1)
GBLC &SYSPUNCH_VOLUME(1)
GBLC &SYSSEQF(1)
GBLC &SYSSTEP(1)
GBLC &SYSSTMT(1)
GBLC &SYSTEM_ID(1)
GBLC &SYSTERM_DSN(1)
GBLC &SYSTERM_MEMBER(1)
GBLC &SYSTERM_VOLUME(1)
GBLC &SYSTEM_JAVA(1)
GBLC &SYSTIME(1)
GBLC &SYSTRACE(1)
GBLC &SYSVER(1)
GBLC &SYSTEM(1)
GBLC &SYSMOD(1)
GBLC &SYSVERM(1)
GBLC &SYSVERS(1)
LOADING FILE rt\test\TESTOPT1.MLC
LOADING MAC LINE *********************************************************************
LOADING MAC LINE * Copyright 2007 Automated Software Tools Corporation               *
LOADING MAC LINE * Copyright 2013 Cat Herder Software, LLC                           *
LOADING MAC LINE * Copyright 2018 Joachim Bartz, Germany                             *
LOADING MAC LINE *                                                                   *
LOADING MAC LINE * This source code is part of z390 assembler/emulator package.      *
LOADING MAC LINE *                                                                   *
LOADING MAC LINE * The z390 package is distributed under GNU general public license  *
LOADING MAC LINE *                                                                   *
LOADING MAC LINE * Author - Don Higgins                                              *
LOADING MAC LINE *********************************************************************
LOADING MAC LINE * 2007-11-30  DSH         Initial version                           *
LOADING MAC LINE * 2007-11-30  DSH RPI-742 Test nested @FILE options using command   *
LOADING MAC LINE *                         RT1 RT\TEST\TESTOPT1 @TESTOPT1            *
LOADING MAC LINE *                         See options in TESTOPT1.OPT, TESTOPTA.OPT,*
LOADING MAC LINE *                         TESTOPTB.OPT                              *
LOADING MAC LINE * 2008-07-21  DSH RPI-877 Test nested @FILE options with all options*
LOADING MAC LINE *********************************************************************
LOADING MAC LINE 
LOADING MAC LINE TESTOPT1 SUBENTRY
LOADING MAC LINE          WTO   'TESTOPT1 TEST NESTED @FILE OPTIONS'
LOADING MAC LINE          SUBEXIT
LOADING MAC LINE          END
LCLC &SYSNDX(1)
LCLA &SYSNEST(1)
LCLC &SYSECT(1)
LCLC &SYSLOC(1)
LCLC &SYSSTYP(1)
LCLC &SYSTSEC(1)
OPEN CODE     1     (1/1) *********************************************************************
OPEN CODE     2     (1/2) * Copyright 2007 Automated Software Tools Corporation               *
OPEN CODE     3     (1/3) * Copyright 2013 Cat Herder Software, LLC                           *
OPEN CODE     4     (1/4) * Copyright 2018 Joachim Bartz, Germany                             *
OPEN CODE     5     (1/5) *                                                                   *
OPEN CODE     6     (1/6) * This source code is part of z390 assembler/emulator package.      *
OPEN CODE     7     (1/7) *                                                                   *
OPEN CODE     8     (1/8) * The z390 package is distributed under GNU general public license  *
OPEN CODE     9     (1/9) *                                                                   *
OPEN CODE    10    (1/10) * Author - Don Higgins                                              *
OPEN CODE    11    (1/11) *********************************************************************
OPEN CODE    12    (1/12) * 2007-11-30  DSH         Initial version                           *
OPEN CODE    13    (1/13) * 2007-11-30  DSH RPI-742 Test nested @FILE options using command   *
OPEN CODE    14    (1/14) *                         RT1 RT\TEST\TESTOPT1 @TESTOPT1            *
OPEN CODE    15    (1/15) *                         See options in TESTOPT1.OPT, TESTOPTA.OPT,*
OPEN CODE    16    (1/16) *                         TESTOPTB.OPT                              *
OPEN CODE    17    (1/17) * 2008-07-21  DSH RPI-877 Test nested @FILE options with all options*
OPEN CODE    18    (1/18) *********************************************************************
OPEN CODE    20    (1/20) *MCALL #=     1 LV= 1 TESTOPT1 SUBENTRY 
LOADING FILE C:\Users\Achim\GitHub\z390\mac\SUBENTRY.MAC
LOADING MAC LINE          MACRO
LOADING MAC LINE .*********************************************************************
LOADING MAC LINE .* Copyright 2007 Automated Software Tools Corporation               *
LOADING MAC LINE .* This source code is part of z390 assembler/emulator package       *
LOADING MAC LINE .* The z390 package is distributed under GNU general public license  *
LOADING MAC LINE .* Author - Don Higgins                                              *
LOADING MAC LINE .* Date   - 04/12/07                                                 *
LOADING MAC LINE .*********************************************************************
LOADING MAC LINE .* 04/12/07 RPI 590 COPIED FROM FPC SHARE SPLA FILE 178 CONTRIBUTION
LOADING MAC LINE .*          TO SUPPORT MULTIPLE BASES AND RENT OPTIONS
LOADING MAC LINE .* 04/26/07 RPI 601 CHANGE BASE OFFSETS FROM 4095 TO STD 4096
LOADING MAC LINE .* 07/11/07 RPI 654 CLEANUP - ADD DROP, CHECK RENT+R13, RWA+RWALNG
LOADING MAC LINE .* 08/21/07 RPI 670 CORRECT REG OPTIMIZATION TO HANDLE ANY REG SYMBOL
LOADING MAC LINE .* 10/01/07 RPI 709 FIX MISSING QUOTE IN AIF AFTER .NOSTK2
LOADING MAC LINE .* 02/17/12 RPI 1189 REMOVE DROP 13 WHEN NOT USING 13
LOADING MAC LINE .*********************************************************************
LOADING MAC LINE .*             MACRO-ID. 'SUBENTRY'
LOADING MAC LINE .*             AUTHOR.   DON HIGGINS.
LOADING MAC LINE .*             DATE WRITTEN.  07/28/70.
LOADING MAC LINE .*             REMARKS.  THIS MACRO GENERATES THE CODE TO ESTABLISH A
LOADING MAC LINE .*                       CSECT WITH SAVE AREA AND BASE REGISTER USING
LOADING MAC LINE .*                       STANDARD OS LINKAGE CONVENTIONS.
LOADING MAC LINE .*             REV1 11/14/74 ADD REENTRANT OPTION WITH WORK AREA
LOADING MAC LINE .*                 1.  FOR REENTRANT LINKAGE YOU MUST SPECIFY
LOADING MAC LINE .*                     A.  RENT=YES
LOADING MAC LINE .*                     B.  AT LEAST ONE BASE REGISTER OTHER THAN 13
LOADING MAC LINE .*                         SUCH AS BASES=(R12)
LOADING MAC LINE .*                 2.  OPTIONALLY YOU CAN SPECIFY A DSECT NAME AND
LOADING MAC LINE .*                     LENGTH FOR A WORK AREA BUILT BEHIND SAVE AREA.
LOADING MAC LINE .*                     FOR EXAMPLE  RWA=MYWORK,RWALNG=8
LOADING MAC LINE .*             REV2 02/10/76 DSH - ADD SUBPOOL OPTION
LOADING MAC LINE .*             REV3 XX/XX/77 FDB - ADD STACK OPTION TO SUPPORT
LOADING MAC LINE .*                                 REENTRANT PERFORM, PENTRY, PEXIT
LOADING MAC LINE .*
LOADING MAC LINE .*                                 STACK=  SETS MAXIMUM DEPTH
LOADING MAC LINE .*                                         OF PERFORMS
LOADING MAC LINE .*
LOADING MAC LINE .*             REV4 01/04/78 DSH - ADD OPTIONS TO OPTIMIZE STACK CODE
LOADING MAC LINE .*                                 AND PROVIDE EXTENDED BASE REGISTERS
LOADING MAC LINE .*
LOADING MAC LINE .*                                 PSTACK= DEFINES PERMANENT REGISTER
LOADING MAC LINE .*                                         FOR STACK TO SAVE LOADS
LOADING MAC LINE .*                                         AND STORES
LOADING MAC LINE .*
LOADING MAC LINE .*                                 PBASE=YES CAUSES BASE REGISTER
LOADING MAC LINE .*                                           DEFINED BY BASES= TO
LOADING MAC LINE .*                                           BE STACKED AND A NEW
LOADING MAC LINE .*                                           BASE ESTABLISHED FOR
LOADING MAC LINE .*                                           EACH PERFORMED ROUTINE
LOADING MAC LINE .*
LOADING MAC LINE .*                                 PSAVE=NO  CAUSES R14 AND R15
LOADING MAC LINE .*                                           TO NOT BE SAVED ACROSS
LOADING MAC LINE .*                                           PERFORMS TO SAVE LOADS
LOADING MAC LINE .*                                           AND STORES
LOADING MAC LINE .*
LOADING MAC LINE .*                                 PCHECK=NO ELIMINATES CODE TO
LOADING MAC LINE .*                                           CHECK FOR STACK
LOADING MAC LINE .*                                           OVERFLOW/UNDERFLOW
LOADING MAC LINE .*
LOADING MAC LINE .*
LOADING MAC LINE .*
LOADING MAC LINE .*********************************************************************
LOADING MAC LINE &NAME    SUBENTRY &CSECT=YES,&BASES=(13),&RENT=NO,&RWA=,&RWALNG=0,&SP=0,&STACK=0,&PSTACK=0,&PBASE=NO,&PSAVE=YES,&PCHECK=YES
LOADING MAC LINE          GBLC  &PSTKREG,&PBASREG,&PBASLAB
LOADING MAC LINE          GBLB  &PSTKSW,&PBASESW,&PSAVESW,&PCHKSW
LOADING MAC LINE          GBLA  &STKSIZE,&STKENT
LOADING MAC LINE          GBLB  &STKOPT,&RENTOPT
LOADING MAC LINE          LCLA  &NBASE,&S,&OFFSET
LOADING MAC LINE &PSTKSW  SETB  0
LOADING MAC LINE &PBASESW SETB  0
LOADING MAC LINE &PSAVESW SETB  0
LOADING MAC LINE &PCHKSW  SETB  0
LOADING MAC LINE &STKOPT  SETB  0
LOADING MAC LINE &RENTOPT SETB  0
LOADING MAC LINE          AIF   ('&CSECT'(1,1) EQ 'N').NOCSECT
LOADING MAC LINE &NAME    CSECT
LOADING MAC LINE          AGO   .STM
LOADING MAC LINE .NOCSECT ANOP
LOADING MAC LINE &NAME    DS    0D
LOADING MAC LINE .STM     ANOP
LOADING MAC LINE          AIF   ('&RENT'(1,1) EQ 'N').NORENT
LOADING MAC LINE &RENTOPT SETB  1
LOADING MAC LINE          AIF   ('&BASES(1)' EQ 'R13').ERR2  RPI 654
LOADING MAC LINE          AIF   (&BASES(1) EQ 13).ERR2     RPI 654
LOADING MAC LINE          STM   14,12,12(13)
LOADING MAC LINE          BAL   &BASES(1),40(15)
LOADING MAC LINE          USING &NAME+8,&BASES(1)
LOADING MAC LINE          DC    CL8'&NAME'
LOADING MAC LINE          DC    CL8'SESA'
LOADING MAC LINE          DC    CL8'&SYSDATE'
LOADING MAC LINE          DC    CL8'&SYSTIME'
LOADING MAC LINE          AIF   ('&STACK' EQ '0').NOSTK1
LOADING MAC LINE &STKOPT  SETB  1
LOADING MAC LINE &STKENT  SETA  4
LOADING MAC LINE          AIF   ('&PBASE'(1,1) EQ 'N').STK1
LOADING MAC LINE &PBASESW SETB  1
LOADING MAC LINE &STKENT  SETA  8
LOADING MAC LINE &PBASREG SETC  '&BASES(1)'
LOADING MAC LINE &PBASLAB SETC  '&NAME+8'
LOADING MAC LINE .STK1    ANOP
LOADING MAC LINE &STKSIZE SETA  20+&STKENT*&STACK+4
LOADING MAC LINE .NOSTK1  ANOP
LOADING MAC LINE          LA    0,80+&RWALNG+&STKSIZE
LOADING MAC LINE          AIF   ('&SP' EQ '0').SKIPSP
LOADING MAC LINE          LA    1,&SP
LOADING MAC LINE          SLL   1,24
LOADING MAC LINE          OR    0,1
LOADING MAC LINE .SKIPSP  ANOP
LOADING MAC LINE          LR    2,0
LOADING MAC LINE          GETMAIN R,LV=(0)
LOADING MAC LINE .*
LOADING MAC LINE .*       SAVE AREA, STACK, AND WORK AREA LAYOUT
LOADING MAC LINE .*
LOADING MAC LINE .*       -8     4  'SESA'
LOADING MAC LINE .*       -4     4  SUB POOL AND TOTAL LENGTH FOR SUBEXIT FREEMAIN
LOADING MAC LINE .*        0    72  STANDARD SAVE AREA
LOADING MAC LINE .*       72     4  R14 SAVE AREA DURING PERFORM IF PSAVE=YES
LOADING MAC LINE .*       76     4  R15 SAVE AREA DURING PERFORM IF PSAVE=YES
LOADING MAC LINE .*       80     4  STACK POINTER SAVE AREA IF NO PSTACK DEFINED
LOADING MAC LINE .*       84     4  LENGTH OF STACK ENTRY (4 OR 8 IF PBASE DEFINED)
LOADING MAC LINE .*       88     4  LOW STACK ENTRY WITH HIGH BIT ON FOR CHECKING
LOADING MAC LINE .*       92     X  STACK OF LENGTH DEFINED BY STACK=
LOADING MAC LINE .*       92+X   4  HIGH STACK ENTRY WITH HIGH BIT ON FOR CHECKING
LOADING MAC LINE .*       96+X   Y  WORK AREA DEFINED BY RWA= AND RWALNG=
LOADING MAC LINE .*
LOADING MAC LINE .*
LOADING MAC LINE          MVC   0(4,1),8(&BASES(1))
LOADING MAC LINE          ST    2,4(,1)
LOADING MAC LINE          LA    1,8(,1)
LOADING MAC LINE          AIF   ('&STACK' EQ '0').NOSTK2
LOADING MAC LINE          AIF   ('&PSAVE'(1,1) EQ 'N').L1
LOADING MAC LINE .*                                          IF SAVE REQUIRED
LOADING MAC LINE .*                                             SET SWITCH
LOADING MAC LINE &PSAVESW SETB  1
LOADING MAC LINE .L1      AIF   ('&PCHECK'(1,1) EQ 'N').L2
LOADING MAC LINE .*                                          IF CHECKING REQUIRED
LOADING MAC LINE .*                                             SET SWITCH
LOADING MAC LINE &PCHKSW  SETB  1
LOADING MAC LINE          XC    88(8+&STKENT*&STACK,1),88(1) CLEAR STACK AREA
LOADING MAC LINE          MVI   88(1),X'80'                  SET LOW BAD BIT
LOADING MAC LINE          MVI   92+&STKENT*&STACK.(1),X'80'  SET HIGH BAD BIT
LOADING MAC LINE .L2      ANOP
LOADING MAC LINE          LA    15,&STKENT
LOADING MAC LINE          ST    15,84(1)                     SET ENTRY LENGTH
LOADING MAC LINE          AIF   ('&PSTACK' NE '0').L3
LOADING MAC LINE .*                                          IF NO STACK REGISTER
LOADING MAC LINE          LA    15,92(1)
LOADING MAC LINE          ST    15,80(1)                       SAVE STACK POINTER
LOADING MAC LINE          AGO   .L4
LOADING MAC LINE .*                                          ELSE
LOADING MAC LINE .L3      ANOP
LOADING MAC LINE &PSTKSW  SETB  1                               SET PSTACK SWITCH
LOADING MAC LINE &PSTKREG SETC  '&PSTACK'                       SAVE REG FOR MACROS
LOADING MAC LINE          LA    &PSTKREG,92(1)                  LOAD STACK REGISTER
LOADING MAC LINE .L4      ANOP
LOADING MAC LINE .NOSTK2  ANOP
LOADING MAC LINE          ST    1,8(13)
LOADING MAC LINE          ST    13,4(1)
LOADING MAC LINE          LM    14,2,12(13)
LOADING MAC LINE          L     13,8(13)
LOADING MAC LINE          AIF   ('&RWALNG' EQ '0' AND '&RWA' EQ '').GEN   RPI 654
LOADING MAC LINE          AIF   ('&RWALNG' EQ '0' OR  '&RWA' EQ '').ERR1  RPI 654,709
LOADING MAC LINE          USING &RWA-(72+&STKSIZE),13
LOADING MAC LINE          AGO   .GEN
LOADING MAC LINE .NORENT  ANOP
LOADING MAC LINE          STM   14,12,12(13)
LOADING MAC LINE          BAL   15,104(15)
LOADING MAC LINE          DC    18F'0'
LOADING MAC LINE          DC    CL8'&NAME'
LOADING MAC LINE          DC    CL8'&SYSDATE'
LOADING MAC LINE          DC    CL8'&SYSTIME'
LOADING MAC LINE          ST    15,8(13)
LOADING MAC LINE          ST    13,4(15)
LOADING MAC LINE          LR    13,15
LOADING MAC LINE          AIF   (T'&BASES(1) NE 'N').CHKR13
LOADING MAC LINE          AIF   (&BASES(1) EQ 13).GENB13
LOADING MAC LINE          AGO   .GENBX
LOADING MAC LINE .CHKR13  ANOP
LOADING MAC LINE          AIF   ('&BASES(1)' EQ 'R13').GENB13      RPI 654
LOADING MAC LINE .GENBX   ANOP
LOADING MAC LINE          ZOPTLR &BASES(1),13
LOADING MAC LINE .SKIPR13 ANOP
LOADING MAC LINE .*       DROP  13                               RPI 654, RPI 1189
LOADING MAC LINE          USING &NAME+8,&BASES(1)
LOADING MAC LINE          AGO   .GEN
LOADING MAC LINE .GENB13  ANOP
LOADING MAC LINE          USING &NAME+8,13
LOADING MAC LINE .GEN     ANOP
LOADING MAC LINE &NBASE   SETA  N'&BASES
LOADING MAC LINE &S       SETA  1
LOADING MAC LINE .LOOP    ANOP
LOADING MAC LINE &S       SETA  &S+1
LOADING MAC LINE          AIF   (&S GT &NBASE).EXIT
LOADING MAC LINE &OFFSET  SETA  &OFFSET+4096                    RPI 601
LOADING MAC LINE          LAY   &BASES(&S),4096(&BASES(&S-1))   RPI 601
LOADING MAC LINE          USING &NAME+8+&OFFSET,&BASES(&S)
LOADING MAC LINE          AGO   .LOOP
LOADING MAC LINE .EXIT    ANOP
LOADING MAC LINE          MEXIT
LOADING MAC LINE .ERR1    MNOTE 'SUBENTRY PARM ERROR RWA= REQUIRES RWALNG= ALSO'
LOADING MAC LINE          MEXIT
LOADING MAC LINE .ERR2    MNOTE 'SUBENTRY PARM ERROR RENT=YES REQUIRES BASE(1) NE 13'
LOADING MAC LINE          MEXIT
LOADING MAC LINE          MEND
LCLC &SYSNDX(1)
LCLA &SYSNEST(1)
LCLC &SYSECT(1)
LCLC &SYSLOC(1)
LCLC &SYSSTYP(1)
LCLC &SYSTSEC(1)
define type M macro label for TESTOPT1
 MZ390 CALLING AZ390 SYM LOCK
 
SUBENTRY     66                  GBLC  &PSTKREG,&PBASREG,&PBASLAB
EXP TOKEN=&PSTKREG
PUSHING VAR - &PSTKREG FROM=&PSTKREG,&PBASREG,&PBASLAB
GBLC &PSTKREG(1)
EXP TOKEN=&PBASREG
PUSHING VAR - &PBASREG FROM=&PBASREG,&PBASLAB
GBLC &PBASREG(1)
EXP TOKEN=&PBASLAB
PUSHING VAR - &PBASLAB FROM=&PBASLAB
GBLC &PBASLAB(1)
SUBENTRY     67                  GBLB  &PSTKSW,&PBASESW,&PSAVESW,&PCHKSW
EXP TOKEN=&PSTKSW
PUSHING VAR - &PSTKSW FROM=&PSTKSW,&PBASESW,&PSAVESW,&PCHKSW
GBLB &PSTKSW(1)
EXP TOKEN=&PBASESW
PUSHING VAR - &PBASESW FROM=&PBASESW,&PSAVESW,&PCHKSW
GBLB &PBASESW(1)
EXP TOKEN=&PSAVESW
PUSHING VAR - &PSAVESW FROM=&PSAVESW,&PCHKSW
GBLB &PSAVESW(1)
EXP TOKEN=&PCHKSW
PUSHING VAR - &PCHKSW FROM=&PCHKSW
GBLB &PCHKSW(1)
SUBENTRY     68                  GBLA  &STKSIZE,&STKENT
EXP TOKEN=&STKSIZE
PUSHING VAR - &STKSIZE FROM=&STKSIZE,&STKENT
GBLA &STKSIZE(1)
EXP TOKEN=&STKENT
PUSHING VAR - &STKENT FROM=&STKENT
GBLA &STKENT(1)
SUBENTRY     69                  GBLB  &STKOPT,&RENTOPT
EXP TOKEN=&STKOPT
PUSHING VAR - &STKOPT FROM=&STKOPT,&RENTOPT
GBLB &STKOPT(1)
EXP TOKEN=&RENTOPT
PUSHING VAR - &RENTOPT FROM=&RENTOPT
GBLB &RENTOPT(1)
SUBENTRY     70                  LCLA  &NBASE,&S,&OFFSET
EXP TOKEN=&NBASE
PUSHING VAR - &NBASE FROM=&NBASE,&S,&OFFSET
LCLA &NBASE(1)
EXP TOKEN=&S
PUSHING VAR - &S FROM=&S,&OFFSET
LCLA &S(1)
EXP TOKEN=&OFFSET
PUSHING VAR - &OFFSET FROM=&OFFSET
LCLA &OFFSET(1)
SUBENTRY     71         &PSTKSW  SETB  0
EXP TOKEN=&PSTKSW
PUSHING VAR - &PSTKSW FROM=&PSTKSW
EXP TOKEN=0
PUSHING SDT - 0
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
  GEN  PC LOC=    1 OP= PUSHA()=0
  GEN  PC LOC=    2 OP= STORV(&PSTKSW)=0
SETB GBLB &PSTKSW(1)= 0
SUBENTRY     72         &PBASESW SETB  0
EXP TOKEN=&PBASESW
PUSHING VAR - &PBASESW FROM=&PBASESW
EXP TOKEN=0
PUSHING SDT - 0
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
  GEN  PC LOC=    3 OP= PUSHA()=0
  GEN  PC LOC=    4 OP= STORV(&PBASESW)=0
SETB GBLB &PBASESW(1)= 0
SUBENTRY     73         &PSAVESW SETB  0
EXP TOKEN=&PSAVESW
PUSHING VAR - &PSAVESW FROM=&PSAVESW
EXP TOKEN=0
PUSHING SDT - 0
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
  GEN  PC LOC=    5 OP= PUSHA()=0
  GEN  PC LOC=    6 OP= STORV(&PSAVESW)=0
SETB GBLB &PSAVESW(1)= 0
SUBENTRY     74         &PCHKSW  SETB  0
EXP TOKEN=&PCHKSW
PUSHING VAR - &PCHKSW FROM=&PCHKSW
EXP TOKEN=0
PUSHING SDT - 0
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
  GEN  PC LOC=    7 OP= PUSHA()=0
  GEN  PC LOC=    8 OP= STORV(&PCHKSW)=0
SETB GBLB &PCHKSW(1)= 0
SUBENTRY     75         &STKOPT  SETB  0
EXP TOKEN=&STKOPT
PUSHING VAR - &STKOPT FROM=&STKOPT
EXP TOKEN=0
PUSHING SDT - 0
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
  GEN  PC LOC=    9 OP= PUSHA()=0
  GEN  PC LOC=   10 OP= STORV(&STKOPT)=0
SETB GBLB &STKOPT(1)= 0
SUBENTRY     76         &RENTOPT SETB  0
EXP TOKEN=&RENTOPT
PUSHING VAR - &RENTOPT FROM=&RENTOPT
EXP TOKEN=0
PUSHING SDT - 0
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
  GEN  PC LOC=   11 OP= PUSHA()=0
  GEN  PC LOC=   12 OP= STORV(&RENTOPT)=0
SETB GBLB &RENTOPT(1)= 0
SUBENTRY     77                  AIF   ('&CSECT'(1,1) EQ 'N').NOCSECT
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=('&CSECT'(1,1) EQ 'N').NOCSECT
EXP TOKEN='
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = '
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 8
PUSHING OP - ' FROM='&CSECT'(1,1) EQ 'N').NOCSECT
EXP TOKEN=&CSECT
PUSHING VAR - &CSECT FROM=&CSECT'(1,1) EQ 'N').NOCSECT
  GEN  PC LOC=   13 OP= PUSHV(&CSECT)='YES'
STRING CONCAT - &CSECT = YES FROM=&CSECT'(1,1) EQ 'N').NOCSECT
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
EXP TOKEN=1
PUSHING SDT - 1
EXP TOKEN=,
EXP OPS=2 VARS=2 PREV OP = , NEXT OP = ,
EXP OPS=2 VARS=2 ACTION = 9 PREV CLASS = 9 NEXT CLASS = 9
EXP TOKEN=1
PUSHING SDT - 1
  GEN  PC LOC=   14 OP= PUSHA()=1
EXP TOKEN=)
EXP OPS=2 VARS=3 PREV OP = , NEXT OP = )
EXP OPS=2 VARS=3 ACTION = 10 PREV CLASS = 9 NEXT CLASS = 4
POP OP=,
SUBSTRING YES(1,1)
  GEN  PC LOC=   15 OP= PUSHA()=1
  GEN  PC LOC=   16 OP= SUBSTR('YES',1,1)='Y'
EXP TOKEN= 
EXP TOKEN=EQ
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = EQ
EXP OPS=1 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - EQ FROM=Q 'N').NOCSECT
EXP TOKEN= 
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = EQ NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='N').NOCSECT
EXP TOKEN=N'
EXP TOKEN='
EXP OPS=3 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=3 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN=)
EXP OPS=2 VARS=2 PREV OP = EQ NEXT OP = )
EXP OPS=2 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=EQ
COMPARE 'Y' EQ 'N' = 0
  GEN  PC LOC=   17 OP= COMPEQ('Y','N')=0
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=   18 OP= AIF(0)=.NOCSECT NO BRANCH
EXP TOKEN=&NAME
PUSHING VAR - &NAME FROM=&NAME
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
SUBENTRY     78    (2/78)+TESTOPT1 CSECT 
SUBENTRY     79                  AGO   .STM
 
SUBENTRY     83                  AIF   ('&RENT'(1,1) EQ 'N').NORENT
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=('&RENT'(1,1) EQ 'N').NORENT
EXP TOKEN='
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = '
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 8
PUSHING OP - ' FROM='&RENT'(1,1) EQ 'N').NORENT
EXP TOKEN=&RENT
PUSHING VAR - &RENT FROM=&RENT'(1,1) EQ 'N').NORENT
  GEN  PC LOC=   19 OP= PUSHV(&RENT)='NO'
STRING CONCAT - &RENT = NO FROM=&RENT'(1,1) EQ 'N').NORENT
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
EXP TOKEN=1
PUSHING SDT - 1
EXP TOKEN=,
EXP OPS=2 VARS=2 PREV OP = , NEXT OP = ,
EXP OPS=2 VARS=2 ACTION = 9 PREV CLASS = 9 NEXT CLASS = 9
EXP TOKEN=1
PUSHING SDT - 1
  GEN  PC LOC=   20 OP= PUSHA()=1
EXP TOKEN=)
EXP OPS=2 VARS=3 PREV OP = , NEXT OP = )
EXP OPS=2 VARS=3 ACTION = 10 PREV CLASS = 9 NEXT CLASS = 4
POP OP=,
SUBSTRING NO(1,1)
  GEN  PC LOC=   21 OP= PUSHA()=1
  GEN  PC LOC=   22 OP= SUBSTR('NO',1,1)='N'
EXP TOKEN= 
EXP TOKEN=EQ
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = EQ
EXP OPS=1 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - EQ FROM=Q 'N').NORENT
EXP TOKEN= 
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = EQ NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='N').NORENT
EXP TOKEN=N'
EXP TOKEN='
EXP OPS=3 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=3 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN=)
EXP OPS=2 VARS=2 PREV OP = EQ NEXT OP = )
EXP OPS=2 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=EQ
COMPARE 'N' EQ 'N' = 1
  GEN  PC LOC=   23 OP= COMPEQ('N','N')=1
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=   24 OP= AIF(1)=.NORENT BRANCH
 
SUBENTRY    168   (2/168)+         STM   14,12,12(13)
SUBENTRY    169   (2/169)+         BAL   15,104(15)
SUBENTRY    170   (2/170)+         DC    18F'0'
EXP TOKEN=&NAME
PUSHING VAR - &NAME FROM=&NAME'
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
SUBENTRY    171                  DC    CL8'&NAME'
SUBENTRY    171   (2/171)+         DC    CL8'TESTOPT1'
EXP TOKEN=&SYSDATE
PUSHING VAR - &SYSDATE FROM=&SYSDATE'
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
SUBENTRY    172                  DC    CL8'&SYSDATE'
SUBENTRY    172   (2/172)+         DC    CL8'010205002'
EXP TOKEN=&SYSTIME
PUSHING VAR - &SYSTIME FROM=&SYSTIME'
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
SUBENTRY    173                  DC    CL8'&SYSTIME'
SUBENTRY    173   (2/173)+         DC    CL8'223344'
SUBENTRY    174   (2/174)+         ST    15,8(13)
SUBENTRY    175   (2/175)+         ST    13,4(15)
SUBENTRY    176   (2/176)+         LR    13,15
SUBENTRY    177                  AIF   (T'&BASES(1) NE 'N').CHKR13
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=(T'&BASES(1) NE 'N').CHKR13
EXP TOKEN=T'
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = T'
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 10
PUSHING OP - T' FROM='&BASES(1) NE 'N').CHKR13
EXP TOKEN=&BASES
PUSHING VAR - &BASES FROM=&BASES(1) NE 'N').CHKR13
  GEN  PC LOC=   25 OP= PUSHV(&BASES)='(13)'
PUSHING OP - ) FROM=(1) NE 'N').CHKR13
EXP TOKEN=1
PUSHING SDT - 1
EXP TOKEN=)
EXP OPS=3 VARS=2 PREV OP = ) NEXT OP = )
EXP OPS=3 VARS=2 ACTION = 11 PREV CLASS = 4 NEXT CLASS = 4
SUBLIST PARM=13
POP OP=)
  GEN  PC LOC=   26 OP= PUSHA()=1
  GEN  PC LOC=   27 OP= SUBLST('(13)',1)='13'
EXP TOKEN= 
EXP TOKEN=NE
EXP OPS=2 VARS=1 PREV OP = T' NEXT OP = NE
EXP OPS=2 VARS=1 ACTION = 12 PREV CLASS = 10 NEXT CLASS = 7
POP OP=T'
 PREFIX OP=T'VARS=1
T' N = T'13
  GEN  PC LOC=   28 OP= T'('13')='N'
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = NE
EXP OPS=1 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - NE FROM=E 'N').CHKR13
EXP TOKEN= 
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = NE NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='N').CHKR13
EXP TOKEN=N'
EXP TOKEN='
EXP OPS=3 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=3 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN=)
EXP OPS=2 VARS=2 PREV OP = NE NEXT OP = )
EXP OPS=2 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=NE
COMPARE 'N' NE 'N' = 0
  GEN  PC LOC=   29 OP= COMPNE('N','N')=0
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=   30 OP= AIF(0)=.CHKR13 NO BRANCH
SUBENTRY    178                  AIF   (&BASES(1) EQ 13).GENB13
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=(&BASES(1) EQ 13).GENB13
EXP TOKEN=&BASES
PUSHING VAR - &BASES FROM=&BASES(1) EQ 13).GENB13
  GEN  PC LOC=   31 OP= PUSHV(&BASES)='(13)'
PUSHING OP - ) FROM=(1) EQ 13).GENB13
EXP TOKEN=1
PUSHING SDT - 1
EXP TOKEN=)
EXP OPS=2 VARS=2 PREV OP = ) NEXT OP = )
EXP OPS=2 VARS=2 ACTION = 11 PREV CLASS = 4 NEXT CLASS = 4
SUBLIST PARM=13
POP OP=)
  GEN  PC LOC=   32 OP= PUSHA()=1
  GEN  PC LOC=   33 OP= SUBLST('(13)',1)='13'
EXP TOKEN= 
EXP TOKEN=EQ
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = EQ
EXP OPS=1 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - EQ FROM=Q 13).GENB13
EXP TOKEN= 
EXP TOKEN=13
PUSHING SDT - 13
EXP TOKEN=)
EXP OPS=2 VARS=2 PREV OP = EQ NEXT OP = )
EXP OPS=2 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=EQ
COMPARE 13 EQ 13 = 1
  GEN  PC LOC=   34 OP= COMPEQ(13,13)=1
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=   35 OP= AIF(1)=.GENB13 BRANCH
 
EXP TOKEN=&NAME
PUSHING VAR - &NAME FROM=&NAME+8,13
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
SUBENTRY    189                  USING &NAME+8,13
SUBENTRY    189   (2/189)+         USING TESTOPT1+8,13
SUBENTRY    191         &NBASE   SETA  N'&BASES
EXP TOKEN=&NBASE
PUSHING VAR - &NBASE FROM=&NBASE
EXP TOKEN=N'
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = N'
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 10
PUSHING OP - N' FROM='&BASES
EXP TOKEN=&BASES
PUSHING VAR - &BASES FROM=&BASES
  GEN  PC LOC=   36 OP= PUSHV(&BASES)='(13)'
EXP OPS=1 VARS=1 PREV OP = N' NEXT OP = ~
EXP OPS=1 VARS=1 ACTION = 12 PREV CLASS = 10 NEXT CLASS = 6
POP OP=N'
 PREFIX OP=N'VARS=1
  GEN  PC LOC=   37 OP= N'('(13)')=1
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
  GEN  PC LOC=   38 OP= STORV(&NBASE)=1
SETA LCLA &NBASE(1)= 1
SUBENTRY    192         &S       SETA  1
EXP TOKEN=&S
PUSHING VAR - &S FROM=&S
EXP TOKEN=1
PUSHING SDT - 1
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
  GEN  PC LOC=   39 OP= PUSHA()=1
  GEN  PC LOC=   40 OP= STORV(&S)=1
SETA LCLA &S(1)= 1
SUBENTRY    194         &S       SETA  &S+1
EXP TOKEN=&S
PUSHING VAR - &S FROM=&S
EXP TOKEN=&S
PUSHING VAR - &S FROM=&S+1
  GEN  PC LOC=   41 OP= PUSHV(&S)=1
EXP TOKEN=+
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = +
EXP OPS=0 VARS=1 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 1
PUSHING OP - + FROM=+1
EXP TOKEN=1
PUSHING SDT - 1
EXP OPS=1 VARS=2 PREV OP = + NEXT OP = ~
EXP OPS=1 VARS=2 ACTION = 1 PREV CLASS = 1 NEXT CLASS = 6
POP OP=+
ADD 2 = 1 + 1
  GEN  PC LOC=   42 OP= ADD(1,1)=2
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
  GEN  PC LOC=   43 OP= STORV(&S)=2
SETA LCLA &S(1)= 2
SUBENTRY    195                  AIF   (&S GT &NBASE).EXIT
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=(&S GT &NBASE).EXIT
EXP TOKEN=&S
PUSHING VAR - &S FROM=&S GT &NBASE).EXIT
  GEN  PC LOC=   44 OP= PUSHV(&S)=2
EXP TOKEN= 
EXP TOKEN=GT
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = GT
EXP OPS=1 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - GT FROM=T &NBASE).EXIT
EXP TOKEN= 
EXP TOKEN=&NBASE
PUSHING VAR - &NBASE FROM=&NBASE).EXIT
  GEN  PC LOC=   45 OP= PUSHV(&NBASE)=1
EXP TOKEN=)
EXP OPS=2 VARS=2 PREV OP = GT NEXT OP = )
EXP OPS=2 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=GT
COMPARE 2 GT 1 = 1
  GEN  PC LOC=   46 OP= COMPGT(2,1)=1
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=   47 OP= AIF(1)=.EXIT BRANCH
 
SUBENTRY    201                  MEXIT
 
SUBENTRY    201   (2/201)+*MEXIT #=     1 LV= 1 SUBENTRY
OPEN CODE    21    (1/21) *MCALL #=     2 LV= 1          WTO   'TESTOPT1 TEST NESTED @FILE OPTIONS'
LOADING FILE C:\Users\Achim\GitHub\z390\mac\WTO.MAC
LOADING MAC LINE          MACRO
LOADING MAC LINE .*********************************************************************
LOADING MAC LINE .* Copyright 2005 Automated Software Tools Corporation               *
LOADING MAC LINE .* This source code is part of z390 assembler/emulator package       *
LOADING MAC LINE .* The z390 package is distributed under GNU general public license  *
LOADING MAC LINE .* Author - Don Higgins                                              *
LOADING MAC LINE .* Date   - 09/30/05                                                 *
LOADING MAC LINE .*********************************************************************
LOADING MAC LINE .* 10/20/05 RPI27 - issue error for any undefined operands
LOADING MAC LINE .* 10/21/05 RPI41  - add MF=L support
LOADING MAC LINE .* 11/05/05 RPI80  - add missing .ERR1 label
LOADING MAC LINE .* 12/02/05 RPI114 - fix to use more unique labels to avoid dup labels
LOADING MAC LINE .* 12/20/05 RPI143 - allow no pos parms for MF=
LOADING MAC LINE .* 01/05/06 RPI153 - remove duplicate label for MF=L
LOADING MAC LINE .* 01/09/06 RPI163 SKIP LR FOR SAME REGISTER
LOADING MAC LINE .* 01/12/06 RPI151 CHANGE BAL TO BRAS FOR USE WITHOUT BASE REG
LOADING MAC LINE .* 04/10/06 RPI244 IGNORE KEYWORDS EXCEPT TEXT= UNSUPPORTED ERROR
LOADING MAC LINE .* 04/25/06 RPI290 ALWAYS GEN LABEL IF ANY, CHECK MF=
LOADING MAC LINE .* 06/14/07 RPI 641 DEFAULT MF=I
LOADING MAC LINE .* 08/21/07 RPI 670 CORRECT REG OPTIMIZATION TO HANDLE ANY REG SYMBOL
LOADING MAC LINE .* 04/19/08 RPI 833 ADD STRING QUOTES FOR HLASM COMPATIBILITY
LOADING MAC LINE .*********************************************************************
LOADING MAC LINE &N       WTO   &MSG,&TEXT=,&MF=I,&CART=,&CONSID=,&CONSNAME=,&DESC=,&KEY=,&MCSFLAG=,&ROUTCDE=,&TOKEN=       IGNORED
LOADING MAC LINE          AIF   ('&N' EQ '').SKIPDS
LOADING MAC LINE &N       DS    0H
LOADING MAC LINE .SKIPDS  ANOP
LOADING MAC LINE          AIF   (N'&SYSLIST LE 1).NPOK
LOADING MAC LINE          MNOTE 12,'UNSUPPORTED OPERAND - &SYSLIST(2)'
LOADING MAC LINE          MEXIT
LOADING MAC LINE .NPOK    ANOP
LOADING MAC LINE          AIF   ('&MF' NE 'I').MF
LOADING MAC LINE          AIF   ('&TEXT' NE '').ERR2
LOADING MAC LINE          AIF   ('&MSG' EQ '').ERR3
LOADING MAC LINE &MSGTEXT SETC  '&MSG'
LOADING MAC LINE          AIF   ('&MSG'(1,1) EQ '''').WTOMSG
LOADING MAC LINE          AIF   ('&MSG'(1,2) NE '(''').ERR2
LOADING MAC LINE &MSGTEXT SETC  '&MSG'(2,K'&MSG-2)
LOADING MAC LINE .WTOMSG  ANOP
LOADING MAC LINE          BRAS  1,*+(WTO#&SYSNDX._EOT-*+1)/2*2
LOADING MAC LINE          DC    AL2(WTO#&SYSNDX._EOT-*,0),C&MSGTEXT
LOADING MAC LINE WTO#&SYSNDX._EOT EQU *
LOADING MAC LINE          SVC   35
LOADING MAC LINE          MEXIT
LOADING MAC LINE .TEXT    ANOP
LOADING MAC LINE          AIF   ('&TEXT' EQ '').ERR3
LOADING MAC LINE .MF      ANOP
LOADING MAC LINE          AIF   ('&MF' EQ 'L').MFL
LOADING MAC LINE          AIF   ('&MF(1)' NE 'E').ERR1
LOADING MAC LINE          AIF   ('&MF(2)' EQ '').SVC
LOADING MAC LINE          AIF   ('&MF(2)'(1,1) EQ '(').MFEREG
LOADING MAC LINE          LA    1,&MF(2)
LOADING MAC LINE          AGO   .SVC
LOADING MAC LINE .MFEREG  ANOP
LOADING MAC LINE          ZOPTLR 1,&MF(2)
LOADING MAC LINE .SVC     ANOP
LOADING MAC LINE          SVC   35
LOADING MAC LINE          MEXIT
LOADING MAC LINE .MFL     ANOP
LOADING MAC LINE          DC    AL2(WTO#&SYSNDX._EOT-*,0),C&MSG
LOADING MAC LINE WTO#&SYSNDX._EOT EQU *
LOADING MAC LINE          MEXIT
LOADING MAC LINE .ERR1    MNOTE 8,'WTO UNDEFINED TYPE - &MF'
LOADING MAC LINE          MEXIT
LOADING MAC LINE .ERR2    MNOTE 8,'WTO TEXT OPTION NOT SUPPORTED'
LOADING MAC LINE          MEXIT
LOADING MAC LINE .ERR3    MNOTE 8,'WTO MISSING ''MSG'' OR TEXT=INED TYPE - &MF'
LOADING MAC LINE          MEND
LCLC &SYSNDX(1)
LCLA &SYSNEST(1)
LCLC &SYSECT(1)
LCLC &SYSLOC(1)
LCLC &SYSSTYP(1)
LCLC &SYSTSEC(1)
 
WTO          34                  AIF   ('&N' EQ '').SKIPDS
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=('&N' EQ '').SKIPDS
EXP TOKEN='
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = '
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 8
PUSHING OP - ' FROM='&N' EQ '').SKIPDS
EXP TOKEN=&N
PUSHING VAR - &N FROM=&N' EQ '').SKIPDS
  GEN  PC LOC=   48 OP= PUSHV(&N)=''
STRING CONCAT - &N =  FROM=&N' EQ '').SKIPDS
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN= 
EXP TOKEN=EQ
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = EQ
EXP OPS=1 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - EQ FROM=Q '').SKIPDS
EXP TOKEN= 
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = EQ NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='').SKIPDS
EXP TOKEN='
EXP OPS=3 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=3 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN=)
EXP OPS=2 VARS=2 PREV OP = EQ NEXT OP = )
EXP OPS=2 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=EQ
COMPARE '' EQ '' = 1
  GEN  PC LOC=   49 OP= COMPEQ('','')=1
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=   50 OP= AIF(1)=.SKIPDS BRANCH
 
WTO          37                  AIF   (N'&SYSLIST LE 1).NPOK
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=(N'&SYSLIST LE 1).NPOK
EXP TOKEN=N'
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = N'
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 10
PUSHING OP - N' FROM='&SYSLIST LE 1).NPOK
EXP TOKEN=&SYSLIST
PUSHING VAR - &SYSLIST FROM=&SYSLIST LE 1).NPOK
  GEN  PC LOC=   51 OP= PUSHV(&SYSLIST)=''
EXP TOKEN= 
EXP TOKEN=LE
EXP OPS=2 VARS=1 PREV OP = N' NEXT OP = LE
EXP OPS=2 VARS=1 ACTION = 12 PREV CLASS = 10 NEXT CLASS = 7
POP OP=N'
 PREFIX OP=N'VARS=1
  GEN  PC LOC=   52 OP= N'('&SYSLIST')=1
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = LE
EXP OPS=1 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - LE FROM=E 1).NPOK
EXP TOKEN= 
EXP TOKEN=1
PUSHING SDT - 1
EXP TOKEN=)
EXP OPS=2 VARS=2 PREV OP = LE NEXT OP = )
EXP OPS=2 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=LE
COMPARE 1 LE 1 = 1
  GEN  PC LOC=   53 OP= COMPLE(1,1)=1
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=   54 OP= AIF(1)=.NPOK BRANCH
 
WTO          41                  AIF   ('&MF' NE 'I').MF
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=('&MF' NE 'I').MF
EXP TOKEN='
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = '
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 8
PUSHING OP - ' FROM='&MF' NE 'I').MF
EXP TOKEN=&MF
PUSHING VAR - &MF FROM=&MF' NE 'I').MF
  GEN  PC LOC=   55 OP= PUSHV(&MF)='I'
STRING CONCAT - &MF = I FROM=&MF' NE 'I').MF
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN= 
EXP TOKEN=NE
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = NE
EXP OPS=1 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - NE FROM=E 'I').MF
EXP TOKEN= 
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = NE NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='I').MF
EXP TOKEN=I'
EXP TOKEN='
EXP OPS=3 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=3 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN=)
EXP OPS=2 VARS=2 PREV OP = NE NEXT OP = )
EXP OPS=2 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=NE
COMPARE 'I' NE 'I' = 0
  GEN  PC LOC=   56 OP= COMPNE('I','I')=0
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=   57 OP= AIF(0)=.MF NO BRANCH
WTO          42                  AIF   ('&TEXT' NE '').ERR2
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=('&TEXT' NE '').ERR2
EXP TOKEN='
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = '
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 8
PUSHING OP - ' FROM='&TEXT' NE '').ERR2
EXP TOKEN=&TEXT
PUSHING VAR - &TEXT FROM=&TEXT' NE '').ERR2
  GEN  PC LOC=   58 OP= PUSHV(&TEXT)=''
STRING CONCAT - &TEXT =  FROM=&TEXT' NE '').ERR2
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN= 
EXP TOKEN=NE
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = NE
EXP OPS=1 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - NE FROM=E '').ERR2
EXP TOKEN= 
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = NE NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='').ERR2
EXP TOKEN='
EXP OPS=3 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=3 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN=)
EXP OPS=2 VARS=2 PREV OP = NE NEXT OP = )
EXP OPS=2 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=NE
COMPARE '' NE '' = 0
  GEN  PC LOC=   59 OP= COMPNE('','')=0
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=   60 OP= AIF(0)=.ERR2 NO BRANCH
WTO          43                  AIF   ('&MSG' EQ '').ERR3
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=('&MSG' EQ '').ERR3
EXP TOKEN='
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = '
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 8
PUSHING OP - ' FROM='&MSG' EQ '').ERR3
EXP TOKEN=&MSG
PUSHING VAR - &MSG FROM=&MSG' EQ '').ERR3
  GEN  PC LOC=   61 OP= PUSHV(&MSG)=''TESTOPT1 TEST NESTED @FILE OPTIONS''
STRING CONCAT - &MSG = 'TESTOPT1 TEST NESTED @FILE OPTIONS' FROM=&MSG' EQ '').ERR3
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN= 
EXP TOKEN=EQ
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = EQ
EXP OPS=1 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - EQ FROM=Q '').ERR3
EXP TOKEN= 
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = EQ NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='').ERR3
EXP TOKEN='
EXP OPS=3 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=3 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN=)
EXP OPS=2 VARS=2 PREV OP = EQ NEXT OP = )
EXP OPS=2 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=EQ
COMPARE ''TESTOPT1 TEST NESTED @FILE OPTIONS'' EQ '' = 0
  GEN  PC LOC=   62 OP= COMPEQ(''TESTOPT1 TEST NESTED @FILE OPTIONS'','')=0
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=   63 OP= AIF(0)=.ERR3 NO BRANCH
WTO          44         &MSGTEXT SETC  '&MSG'
EXP TOKEN=&MSGTEXT
PUSHING VAR - &MSGTEXT FROM=&MSGTEXT
LCLC &MSGTEXT(1)
EXP TOKEN='
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = '
EXP OPS=0 VARS=0 ACTION = 8 PREV CLASS = 6 NEXT CLASS = 8
PUSHING OP - ' FROM='&MSG'
EXP TOKEN=&MSG
PUSHING VAR - &MSG FROM=&MSG'
  GEN  PC LOC=   64 OP= PUSHV(&MSG)=''TESTOPT1 TEST NESTED @FILE OPTIONS''
STRING CONCAT - &MSG = 'TESTOPT1 TEST NESTED @FILE OPTIONS' FROM=&MSG'
EXP TOKEN='
EXP OPS=1 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=1 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
  GEN  PC LOC=   65 OP= STORV(&MSGTEXT)=''TESTOPT1 TEST NESTED @FILE OPTIONS''
SETC LCLC &MSGTEXT(1)= 'TESTOPT1 TEST NESTED @FILE OPTIONS'
WTO          45                  AIF   ('&MSG'(1,1) EQ '''').WTOMSG
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=('&MSG'(1,1) EQ '''').WTOMSG
EXP TOKEN='
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = '
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 8
PUSHING OP - ' FROM='&MSG'(1,1) EQ '''').WTOMSG
EXP TOKEN=&MSG
PUSHING VAR - &MSG FROM=&MSG'(1,1) EQ '''').WTOMSG
  GEN  PC LOC=   66 OP= PUSHV(&MSG)=''TESTOPT1 TEST NESTED @FILE OPTIONS''
STRING CONCAT - &MSG = 'TESTOPT1 TEST NESTED @FILE OPTIONS' FROM=&MSG'(1,1) EQ '''').WTOMSG
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
EXP TOKEN=1
PUSHING SDT - 1
EXP TOKEN=,
EXP OPS=2 VARS=2 PREV OP = , NEXT OP = ,
EXP OPS=2 VARS=2 ACTION = 9 PREV CLASS = 9 NEXT CLASS = 9
EXP TOKEN=1
PUSHING SDT - 1
  GEN  PC LOC=   67 OP= PUSHA()=1
EXP TOKEN=)
EXP OPS=2 VARS=3 PREV OP = , NEXT OP = )
EXP OPS=2 VARS=3 ACTION = 10 PREV CLASS = 9 NEXT CLASS = 4
POP OP=,
SUBSTRING 'TESTOPT1 TEST NESTED @FILE OPTIONS'(1,1)
  GEN  PC LOC=   68 OP= PUSHA()=1
  GEN  PC LOC=   69 OP= SUBSTR(''TESTOPT1 TEST NESTED @FILE OPTIONS'',1,1)='''
EXP TOKEN= 
EXP TOKEN=EQ
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = EQ
EXP OPS=1 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - EQ FROM=Q '''').WTOMSG
EXP TOKEN= 
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = EQ NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='''').WTOMSG
EXP TOKEN='
EXP OPS=3 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=3 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
EXP TOKEN='
EXP OPS=3 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=3 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN=)
EXP OPS=2 VARS=2 PREV OP = EQ NEXT OP = )
EXP OPS=2 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=EQ
COMPARE ''' EQ ''' = 1
  GEN  PC LOC=   70 OP= COMPEQ(''',''')=1
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=   71 OP= AIF(1)=.WTOMSG BRANCH
 
EXP TOKEN=&SYSNDX
PUSHING VAR - &SYSNDX FROM=&SYSNDX._EOT-*+1)/2*2
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
WTO          49                  BRAS  1,*+(WTO#&SYSNDX._EOT-*+1)/2*2
WTO          49    (3/49)+         BRAS  1,*+(WTO#0002_EOT-*+1)/2*2
EXP TOKEN=&SYSNDX
PUSHING VAR - &SYSNDX FROM=&SYSNDX._EOT-*,0),C&MSGTEXT
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
EXP TOKEN=&MSGTEXT
PUSHING VAR - &MSGTEXT FROM=&MSGTEXT
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
WTO          50                  DC    AL2(WTO#&SYSNDX._EOT-*,0),C&MSGTEXT
WTO          50    (3/50)+         DC    AL2(WTO#0002_EOT-*,0),C'TESTOPT1 TEST NESTED @FILE OPTIONS'
EXP TOKEN=&SYSNDX
PUSHING VAR - &SYSNDX FROM=&SYSNDX._EOT
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
WTO          51    (3/51)+WTO#0002_EOT     EQU *
WTO          52    (3/52)+         SVC   35
WTO          53                  MEXIT
 
WTO          53    (3/53)+*MEXIT #=     2 LV= 1 WTO
OPEN CODE    22    (1/22) *MCALL #=     3 LV= 1          SUBEXIT 
LOADING FILE C:\Users\Achim\GitHub\z390\mac\SUBEXIT.MAC
LOADING MAC LINE          MACRO
LOADING MAC LINE .*********************************************************************
LOADING MAC LINE .* Copyright 2007 Automated Software Tools Corporation               *
LOADING MAC LINE .* This source code is part of z390 assembler/emulator package       *
LOADING MAC LINE .* The z390 package is distributed under GNU general public license  *
LOADING MAC LINE .* Author - Don Higgins                                              *
LOADING MAC LINE .* Date   - 04/12/07                                                 *
LOADING MAC LINE .*********************************************************************
LOADING MAC LINE .* 04/12/07 DSH RPI 590 COPIED FROM CBT SHARE SPLA TAPE 178 TO ADD
LOADING MAC LINE .*          SUPPORT FOR RENT, EXTRA BASES, ETC.
LOADING MAC LINE .* 04/24/07 RPI 601 CORRECT PLACEMENT OF LABEL
LOADING MAC LINE .* 07/11/07 RPI 654 REMOVE USED RWALNG= AND SP=
LOADING MAC LINE .* 08/21/07 RPI 670 CORRECT REG OPTIMIZATION TO HANDLE ANY REG SYMBOL
LOADING MAC LINE .* 04/19/08 RPI 833 ADD STRING QUOTES FOR HLASM COMPATIBILITY
LOADING MAC LINE .*********************************************************************
LOADING MAC LINE .*             MACRO-ID. 'SUBEXIT'.
LOADING MAC LINE .*             AUTHOR.   DON HIGGINS.
LOADING MAC LINE .*             DATE WRITTEN.  07/28/70.
LOADING MAC LINE .*             REMARKS.  THIS MACRO GENERATES THE CODE TO RESTORE
LOADING MAC LINE .*                       REGISTERS AND RETURN FROM A CSECT.  A RETURN
LOADING MAC LINE .*                       CODE OF ZERO IS RETURNED UNLESS A DIFFERENT
LOADING MAC LINE .*                       CODE IS SPECIFIED USING THE KEY WORD RC=.
LOADING MAC LINE .*             REV1 11/14/74 ADD REENTRANT OPTION. SEE SUBENTRY.
LOADING MAC LINE .*             REV2 12/09/74 ADD REG OPTION FOR RC OPERAND.
LOADING MAC LINE .*             REV3 02/10/76 DSH - ADD SUBPOOL OPTION
LOADING MAC LINE .*********************************************************************
LOADING MAC LINE &NAME    SUBEXIT &RC=0,&RENT=NO
LOADING MAC LINE          AIF   ('&NAME' EQ '').SKIPDS
LOADING MAC LINE &NAME    DS    0H
LOADING MAC LINE .SKIPDS  ANOP
LOADING MAC LINE          GBLB  &RENTOPT
LOADING MAC LINE          AIF   ('&RC'(1,1) EQ '(').RCREG
LOADING MAC LINE          LA    15,&RC
LOADING MAC LINE          AGO   .CHKRENT
LOADING MAC LINE .RCREG   ANOP
LOADING MAC LINE          ZOPTLR 15,&RC
LOADING MAC LINE .CHKRENT ANOP
LOADING MAC LINE          AIF   (&RENTOPT EQ 0).NORENT
LOADING MAC LINE          L     13,4(,13)
LOADING MAC LINE          STM   15,1,16(13)
LOADING MAC LINE          L     1,8(,13)
LOADING MAC LINE          LA    15,8
LOADING MAC LINE          SLR   1,15
LOADING MAC LINE          L     0,4(,1)
LOADING MAC LINE          FREEMAIN R,LV=(0),A=(1)
LOADING MAC LINE          LM    14,12,12(13)
LOADING MAC LINE          BR    14
LOADING MAC LINE          MEXIT
LOADING MAC LINE .NORENT  ANOP
LOADING MAC LINE          L     13,4(,13)
LOADING MAC LINE          L     14,12(,13)
LOADING MAC LINE          LM    2,12,28(13)
LOADING MAC LINE          BR    14
LOADING MAC LINE          MEND
LCLC &SYSNDX(1)
LCLA &SYSNEST(1)
LCLC &SYSECT(1)
LCLC &SYSLOC(1)
LCLC &SYSSTYP(1)
LCLC &SYSTSEC(1)
 
SUBEXIT      28                  AIF   ('&NAME' EQ '').SKIPDS
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=('&NAME' EQ '').SKIPDS
EXP TOKEN='
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = '
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 8
PUSHING OP - ' FROM='&NAME' EQ '').SKIPDS
EXP TOKEN=&NAME
PUSHING VAR - &NAME FROM=&NAME' EQ '').SKIPDS
  GEN  PC LOC=   72 OP= PUSHV(&NAME)=''
STRING CONCAT - &NAME =  FROM=&NAME' EQ '').SKIPDS
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN= 
EXP TOKEN=EQ
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = EQ
EXP OPS=1 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - EQ FROM=Q '').SKIPDS
EXP TOKEN= 
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = EQ NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='').SKIPDS
EXP TOKEN='
EXP OPS=3 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=3 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN=)
EXP OPS=2 VARS=2 PREV OP = EQ NEXT OP = )
EXP OPS=2 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=EQ
COMPARE '' EQ '' = 1
  GEN  PC LOC=   73 OP= COMPEQ('','')=1
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=   74 OP= AIF(1)=.SKIPDS BRANCH
 
SUBEXIT      31                  GBLB  &RENTOPT
EXP TOKEN=&RENTOPT
PUSHING VAR - &RENTOPT FROM=&RENTOPT
SUBEXIT      32                  AIF   ('&RC'(1,1) EQ '(').RCREG
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=('&RC'(1,1) EQ '(').RCREG
EXP TOKEN='
EXP OPS=1 VARS=0 PREV OP = ( NEXT OP = '
EXP OPS=1 VARS=0 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 8
PUSHING OP - ' FROM='&RC'(1,1) EQ '(').RCREG
EXP TOKEN=&RC
PUSHING VAR - &RC FROM=&RC'(1,1) EQ '(').RCREG
  GEN  PC LOC=   75 OP= PUSHV(&RC)='0'
STRING CONCAT - &RC = 0 FROM=&RC'(1,1) EQ '(').RCREG
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = ' NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
EXP TOKEN=1
PUSHING SDT - 1
EXP TOKEN=,
EXP OPS=2 VARS=2 PREV OP = , NEXT OP = ,
EXP OPS=2 VARS=2 ACTION = 9 PREV CLASS = 9 NEXT CLASS = 9
EXP TOKEN=1
PUSHING SDT - 1
  GEN  PC LOC=   76 OP= PUSHA()=1
EXP TOKEN=)
EXP OPS=2 VARS=3 PREV OP = , NEXT OP = )
EXP OPS=2 VARS=3 ACTION = 10 PREV CLASS = 9 NEXT CLASS = 4
POP OP=,
SUBSTRING 0(1,1)
  GEN  PC LOC=   77 OP= PUSHA()=1
  GEN  PC LOC=   78 OP= SUBSTR('0',1,1)='0'
EXP TOKEN= 
EXP TOKEN=EQ
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = EQ
EXP OPS=1 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - EQ FROM=Q '(').RCREG
EXP TOKEN= 
EXP TOKEN='
EXP OPS=2 VARS=1 PREV OP = EQ NEXT OP = '
EXP OPS=2 VARS=1 ACTION = 8 PREV CLASS = 7 NEXT CLASS = 8
PUSHING OP - ' FROM='(').RCREG
EXP TOKEN=(
EXP TOKEN='
EXP OPS=3 VARS=2 PREV OP = ' NEXT OP = '
EXP OPS=3 VARS=2 ACTION = 8 PREV CLASS = 8 NEXT CLASS = 8
POP OP='
EXP TOKEN=)
EXP OPS=2 VARS=2 PREV OP = EQ NEXT OP = )
EXP OPS=2 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=EQ
COMPARE '0' EQ '(' = 0
  GEN  PC LOC=   79 OP= COMPEQ('0','(')=0
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=   80 OP= AIF(0)=.RCREG NO BRANCH
EXP TOKEN=&RC
PUSHING VAR - &RC FROM=&RC
EXP OPS=0 VARS=1 PREV OP = ~ NEXT OP = ~
EXP OPS=0 VARS=1 ACTION = 6 PREV CLASS = 6 NEXT CLASS = 6
SUBEXIT      33                  LA    15,&RC
SUBEXIT      33    (4/33)+         LA    15,0
SUBEXIT      34                  AGO   .CHKRENT
 
SUBEXIT      38                  AIF   (&RENTOPT EQ 0).NORENT
EXP TOKEN=(
EXP OPS=0 VARS=0 PREV OP = ~ NEXT OP = (
EXP OPS=0 VARS=0 ACTION = 3 PREV CLASS = 6 NEXT CLASS = 3
PUSHING OP - ( FROM=(&RENTOPT EQ 0).NORENT
EXP TOKEN=&RENTOPT
PUSHING VAR - &RENTOPT FROM=&RENTOPT EQ 0).NORENT
  GEN  PC LOC=   81 OP= PUSHV(&RENTOPT)=0
EXP TOKEN= 
EXP TOKEN=EQ
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = EQ
EXP OPS=1 VARS=1 ACTION = 3 PREV CLASS = 3 NEXT CLASS = 7
PUSHING OP - EQ FROM=Q 0).NORENT
EXP TOKEN= 
EXP TOKEN=0
PUSHING SDT - 0
EXP TOKEN=)
EXP OPS=2 VARS=2 PREV OP = EQ NEXT OP = )
EXP OPS=2 VARS=2 ACTION = 7 PREV CLASS = 7 NEXT CLASS = 4
POP OP=EQ
COMPARE 0 EQ 0 = 1
  GEN  PC LOC=   82 OP= COMPEQ(0,0)=1
EXP OPS=1 VARS=1 PREV OP = ( NEXT OP = )
EXP OPS=1 VARS=1 ACTION = 4 PREV CLASS = 3 NEXT CLASS = 4
POP OP=(
  GEN  PC LOC=   83 OP= AIF(1)=.NORENT BRANCH
 
SUBEXIT      50    (4/50)+         L     13,4(,13)
SUBEXIT      51    (4/51)+         L     14,12(,13)
SUBEXIT      52    (4/52)+         LM    2,12,28(13)
SUBEXIT      53    (4/53)+         BR    14
SUBEXIT      53    (4/53)+*MEXIT #=     3 LV= 1 SUBEXIT
OPEN CODE    23    (1/23)          END 
MZ390I total mnote warnings  = 0
MZ390I total mnote errors    = 0
MZ390I max   mnote level     = 0
MZ390I total mz390 errors    = 0
MZ390I total az390 errors    = 0
TESTOPT1  MZ390 ENDED RC= 0 IO=1070
